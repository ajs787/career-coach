// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  userSessions  UserSession[]
  referrals     Referral[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  ageRange    String?  // "20s" | "30s" | "40s" | "50s" | "60s+"
  state       String?  // US state abbreviation
  hasQuals    Boolean?
  constraints String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSession {
  id          String    @id @default(cuid())
  userId      String
  targetRole  String    // user's profession/business text
  state       String    // e.g., "CA"
  ageRange    String
  hasQuals    Boolean
  constraints String?
  status      String    @default("active") // active|completed|abandoned
  createdAt   DateTime  @default(now())
  completedAt DateTime?
  answers     Answer[]
  verdict     Verdict?
  questions   GeneratedQuestion[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuestionTemplate {
  id         String   @id @default(cuid())
  bucket     String   // personality|daily|commitment|lifestyle|entry|unsexy
  pattern    String   // templated text with slots
  weight     Int      // default weight if used
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model GeneratedQuestion {
  id         String       @id @default(cuid())
  sessionId  String
  order      Int
  bucket     String
  text       String
  weight     Int
  source     String       // ai|template|rule
  createdAt  DateTime     @default(now())
  session    UserSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  answers    Answer[]
}

model Answer {
  id         String            @id @default(cuid())
  sessionId  String
  questionId String
  value      Boolean           // yes=true, no=false
  note       String?
  createdAt  DateTime          @default(now())
  session    UserSession       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question   GeneratedQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Verdict {
  id           String      @id @default(cuid())
  sessionId    String      @unique
  fitScore     Int         // 0..100
  color        String      // green|amber|red
  summary      String
  bucketScores Json        // {personality: 72, daily: 58, ...}
  mismatches   Json        // array of flagged items
  nextSteps    Json        // checklist items
  altCareers   Json        // [{title, reason}, ...]
  createdAt    DateTime    @default(now())
  session      UserSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Career {
  id          String   @id @default(cuid())
  title       String
  usTags      String[] // array of tags for US market
  personality String[] // e.g., Big5/Enneagram tags (optional)
  realities   String[] // daily tasks keywords
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CareerFact {
  id        String   @id @default(cuid())
  state     String   // CA, NY, ...
  role      String   // canonicalized
  licensing String?  // body, steps
  training  String?  // programs, durations
  costsUSD  String?  // ranges
  salaryUSD String?  // entry/median ranges
  links     String[] // citation URLs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([state, role])
}

model Referral {
  id         String   @id @default(cuid())
  userId     String
  code       String   @unique
  clicks     Int      @default(0)
  signups    Int      @default(0)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  meta      Json?
  createdAt DateTime @default(now())
}